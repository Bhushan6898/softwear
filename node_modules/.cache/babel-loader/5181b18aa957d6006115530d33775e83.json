{"ast":null,"code":"import _slicedToArray from \"D:/mahaluxmi_hardwere_softwere/Mahaluxmi_client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"D:/mahaluxmi_hardwere_softwere/Mahaluxmi_client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"reactReduxForwardedRef\"];\n/* eslint-disable valid-jsdoc, @typescript-eslint/no-unused-vars */\n\nimport hoistStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\nimport { isValidElementType, isContextConsumer } from 'react-is';\nimport defaultSelectorFactory from '../connect/selectorFactory';\nimport { mapDispatchToPropsFactory } from '../connect/mapDispatchToProps';\nimport { mapStateToPropsFactory } from '../connect/mapStateToProps';\nimport { mergePropsFactory } from '../connect/mergeProps';\nimport { createSubscription } from '../utils/Subscription';\nimport { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect';\nimport shallowEqual from '../utils/shallowEqual';\nimport warning from '../utils/warning';\nimport { ReactReduxContext } from './Context';\nimport { notInitialized } from '../utils/useSyncExternalStore';\nvar useSyncExternalStore = notInitialized;\nexport var initializeConnect = function initializeConnect(fn) {\n  useSyncExternalStore = fn;\n}; // Define some constant arrays just to avoid re-creating these\n\nvar EMPTY_ARRAY = [null, 0];\nvar NO_SUBSCRIPTION_ARRAY = [null, null]; // Attempts to stringify whatever not-really-a-component value we were given\n// for logging in an error message\n\nvar stringifyComponent = function stringifyComponent(Comp) {\n  try {\n    return JSON.stringify(Comp);\n  } catch (err) {\n    return String(Comp);\n  }\n}; // This is \"just\" a `useLayoutEffect`, but with two modifications:\n// - we need to fall back to `useEffect` in SSR to avoid annoying warnings\n// - we extract this to a separate function to avoid closing over values\n//   and causing memory leaks\n\n\nfunction useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {\n  useIsomorphicLayoutEffect(function () {\n    return effectFunc.apply(void 0, _toConsumableArray(effectArgs));\n  }, dependencies);\n} // Effect callback, extracted: assign the latest props values to refs for later usage\n\n\nfunction captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, // actualChildProps: unknown,\nchildPropsFromStoreUpdate, notifyNestedSubs) {\n  // We want to capture the wrapper props and child props we used for later comparisons\n  lastWrapperProps.current = wrapperProps;\n  renderIsScheduled.current = false; // If the render was from a store update, clear out that reference and cascade the subscriber update\n\n  if (childPropsFromStoreUpdate.current) {\n    childPropsFromStoreUpdate.current = null;\n    notifyNestedSubs();\n  }\n} // Effect callback, extracted: subscribe to the Redux store or nearest connected ancestor,\n// check for updates after dispatched actions, and trigger re-renders.\n\n\nfunction subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, isMounted, childPropsFromStoreUpdate, notifyNestedSubs, // forceComponentUpdateDispatch: React.Dispatch<any>,\nadditionalSubscribeListener) {\n  // If we're not subscribed to the store, nothing to do here\n  if (!shouldHandleStateChanges) return function () {}; // Capture values for checking if and when this component unmounts\n\n  var didUnsubscribe = false;\n  var lastThrownError = null; // We'll run this callback every time a store subscription update propagates to this component\n\n  var checkForUpdates = function checkForUpdates() {\n    if (didUnsubscribe || !isMounted.current) {\n      // Don't run stale listeners.\n      // Redux doesn't guarantee unsubscriptions happen until next dispatch.\n      return;\n    } // TODO We're currently calling getState ourselves here, rather than letting `uSES` do it\n\n\n    var latestStoreState = store.getState();\n    var newChildProps, error;\n\n    try {\n      // Actually run the selector with the most recent store state and wrapper props\n      // to determine what the child props should be\n      newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);\n    } catch (e) {\n      error = e;\n      lastThrownError = e;\n    }\n\n    if (!error) {\n      lastThrownError = null;\n    } // If the child props haven't changed, nothing to do here - cascade the subscription update\n\n\n    if (newChildProps === lastChildProps.current) {\n      if (!renderIsScheduled.current) {\n        notifyNestedSubs();\n      }\n    } else {\n      // Save references to the new child props.  Note that we track the \"child props from store update\"\n      // as a ref instead of a useState/useReducer because we need a way to determine if that value has\n      // been processed.  If this went into useState/useReducer, we couldn't clear out the value without\n      // forcing another re-render, which we don't want.\n      lastChildProps.current = newChildProps;\n      childPropsFromStoreUpdate.current = newChildProps;\n      renderIsScheduled.current = true; // TODO This is hacky and not how `uSES` is meant to be used\n      // Trigger the React `useSyncExternalStore` subscriber\n\n      additionalSubscribeListener();\n    }\n  }; // Actually subscribe to the nearest connected ancestor (or store)\n\n\n  subscription.onStateChange = checkForUpdates;\n  subscription.trySubscribe(); // Pull data from the store after first render in case the store has\n  // changed since we began.\n\n  checkForUpdates();\n\n  var unsubscribeWrapper = function unsubscribeWrapper() {\n    didUnsubscribe = true;\n    subscription.tryUnsubscribe();\n    subscription.onStateChange = null;\n\n    if (lastThrownError) {\n      // It's possible that we caught an error due to a bad mapState function, but the\n      // parent re-rendered without this component and we're about to unmount.\n      // This shouldn't happen as long as we do top-down subscriptions correctly, but\n      // if we ever do those wrong, this throw will surface the error in our tests.\n      // In that case, throw the error from here so it doesn't get lost.\n      throw lastThrownError;\n    }\n  };\n\n  return unsubscribeWrapper;\n} // Reducer initial state creation for our update reducer\n\n\nvar initStateUpdates = function initStateUpdates() {\n  return EMPTY_ARRAY;\n};\n\nfunction strictEqual(a, b) {\n  return a === b;\n}\n/**\r\n * Infers the type of props that a connector will inject into a component.\r\n */\n\n\nvar hasWarnedAboutDeprecatedPureOption = false;\n/**\r\n * Connects a React component to a Redux store.\r\n *\r\n * - Without arguments, just wraps the component, without changing the behavior / props\r\n *\r\n * - If 2 params are passed (3rd param, mergeProps, is skipped), default behavior\r\n * is to override ownProps (as stated in the docs), so what remains is everything that's\r\n * not a state or dispatch prop\r\n *\r\n * - When 3rd param is passed, we don't know if ownProps propagate and whether they\r\n * should be valid component props, because it depends on mergeProps implementation.\r\n * As such, it is the user's responsibility to extend ownProps interface from state or\r\n * dispatch props or both when applicable\r\n *\r\n * @param mapStateToProps A function that extracts values from state\r\n * @param mapDispatchToProps Setup for dispatching actions\r\n * @param mergeProps Optional callback to merge state and dispatch props together\r\n * @param options Options for configuring the connection\r\n *\r\n */\n\nfunction connect(mapStateToProps, mapDispatchToProps, mergeProps) {\n  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n      pure = _ref.pure,\n      _ref$areStatesEqual = _ref.areStatesEqual,\n      areStatesEqual = _ref$areStatesEqual === void 0 ? strictEqual : _ref$areStatesEqual,\n      _ref$areOwnPropsEqual = _ref.areOwnPropsEqual,\n      areOwnPropsEqual = _ref$areOwnPropsEqual === void 0 ? shallowEqual : _ref$areOwnPropsEqual,\n      _ref$areStatePropsEqu = _ref.areStatePropsEqual,\n      areStatePropsEqual = _ref$areStatePropsEqu === void 0 ? shallowEqual : _ref$areStatePropsEqu,\n      _ref$areMergedPropsEq = _ref.areMergedPropsEqual,\n      areMergedPropsEqual = _ref$areMergedPropsEq === void 0 ? shallowEqual : _ref$areMergedPropsEq,\n      _ref$forwardRef = _ref.forwardRef,\n      forwardRef = _ref$forwardRef === void 0 ? false : _ref$forwardRef,\n      _ref$context = _ref.context,\n      context = _ref$context === void 0 ? ReactReduxContext : _ref$context;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (pure !== undefined && !hasWarnedAboutDeprecatedPureOption) {\n      hasWarnedAboutDeprecatedPureOption = true;\n      warning('The `pure` option has been removed. `connect` is now always a \"pure/memoized\" component');\n    }\n  }\n\n  var Context = context;\n  var initMapStateToProps = mapStateToPropsFactory(mapStateToProps);\n  var initMapDispatchToProps = mapDispatchToPropsFactory(mapDispatchToProps);\n  var initMergeProps = mergePropsFactory(mergeProps);\n  var shouldHandleStateChanges = Boolean(mapStateToProps);\n\n  var wrapWithConnect = function wrapWithConnect(WrappedComponent) {\n    if (process.env.NODE_ENV !== 'production' && !isValidElementType(WrappedComponent)) {\n      throw new Error(\"You must pass a component to the function returned by connect. Instead received \".concat(stringifyComponent(WrappedComponent)));\n    }\n\n    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';\n    var displayName = \"Connect(\".concat(wrappedComponentName, \")\");\n    var selectorFactoryOptions = {\n      shouldHandleStateChanges: shouldHandleStateChanges,\n      displayName: displayName,\n      wrappedComponentName: wrappedComponentName,\n      WrappedComponent: WrappedComponent,\n      // @ts-ignore\n      initMapStateToProps: initMapStateToProps,\n      // @ts-ignore\n      initMapDispatchToProps: initMapDispatchToProps,\n      initMergeProps: initMergeProps,\n      areStatesEqual: areStatesEqual,\n      areStatePropsEqual: areStatePropsEqual,\n      areOwnPropsEqual: areOwnPropsEqual,\n      areMergedPropsEqual: areMergedPropsEqual\n    };\n\n    function ConnectFunction(props) {\n      var _React$useMemo = React.useMemo(function () {\n        // Distinguish between actual \"data\" props that were passed to the wrapper component,\n        // and values needed to control behavior (forwarded refs, alternate context instances).\n        // To maintain the wrapperProps object reference, memoize this destructuring.\n        var reactReduxForwardedRef = props.reactReduxForwardedRef,\n            wrapperProps = _objectWithoutPropertiesLoose(props, _excluded);\n\n        return [props.context, reactReduxForwardedRef, wrapperProps];\n      }, [props]),\n          _React$useMemo2 = _slicedToArray(_React$useMemo, 3),\n          propsContext = _React$useMemo2[0],\n          reactReduxForwardedRef = _React$useMemo2[1],\n          wrapperProps = _React$useMemo2[2];\n\n      var ContextToUse = React.useMemo(function () {\n        // Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.\n        // Memoize the check that determines which context instance we should use.\n        return propsContext && propsContext.Consumer && // @ts-ignore\n        isContextConsumer( /*#__PURE__*/React.createElement(propsContext.Consumer, null)) ? propsContext : Context;\n      }, [propsContext, Context]); // Retrieve the store and ancestor subscription via context, if available\n\n      var contextValue = React.useContext(ContextToUse); // The store _must_ exist as either a prop or in context.\n      // We'll check to see if it _looks_ like a Redux store first.\n      // This allows us to pass through a `store` prop that is just a plain value.\n\n      var didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);\n      var didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);\n\n      if (process.env.NODE_ENV !== 'production' && !didStoreComeFromProps && !didStoreComeFromContext) {\n        throw new Error(\"Could not find \\\"store\\\" in the context of \" + \"\\\"\".concat(displayName, \"\\\". Either wrap the root component in a <Provider>, \") + \"or pass a custom React context provider to <Provider> and the corresponding \" + \"React context consumer to \".concat(displayName, \" in connect options.\"));\n      } // Based on the previous check, one of these must be true\n\n\n      var store = didStoreComeFromProps ? props.store : contextValue.store;\n      var getServerState = didStoreComeFromContext ? contextValue.getServerState : store.getState;\n      var childPropsSelector = React.useMemo(function () {\n        // The child props selector needs the store reference as an input.\n        // Re-create this selector whenever the store changes.\n        return defaultSelectorFactory(store.dispatch, selectorFactoryOptions);\n      }, [store]);\n\n      var _React$useMemo3 = React.useMemo(function () {\n        if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY; // This Subscription's source should match where store came from: props vs. context. A component\n        // connected to the store via props shouldn't use subscription from context, or vice versa.\n\n        var subscription = createSubscription(store, didStoreComeFromProps ? undefined : contextValue.subscription); // `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in\n        // the middle of the notification loop, where `subscription` will then be null. This can\n        // probably be avoided if Subscription's listeners logic is changed to not call listeners\n        // that have been unsubscribed in the  middle of the notification loop.\n\n        var notifyNestedSubs = subscription.notifyNestedSubs.bind(subscription);\n        return [subscription, notifyNestedSubs];\n      }, [store, didStoreComeFromProps, contextValue]),\n          _React$useMemo4 = _slicedToArray(_React$useMemo3, 2),\n          subscription = _React$useMemo4[0],\n          notifyNestedSubs = _React$useMemo4[1]; // Determine what {store, subscription} value should be put into nested context, if necessary,\n      // and memoize that value to avoid unnecessary context updates.\n\n\n      var overriddenContextValue = React.useMemo(function () {\n        if (didStoreComeFromProps) {\n          // This component is directly subscribed to a store from props.\n          // We don't want descendants reading from this store - pass down whatever\n          // the existing context value is from the nearest connected ancestor.\n          return contextValue;\n        } // Otherwise, put this component's subscription instance into context, so that\n        // connected descendants won't update until after this component is done\n\n\n        return _extends({}, contextValue, {\n          subscription: subscription\n        });\n      }, [didStoreComeFromProps, contextValue, subscription]); // Set up refs to coordinate values between the subscription effect and the render logic\n\n      var lastChildProps = React.useRef();\n      var lastWrapperProps = React.useRef(wrapperProps);\n      var childPropsFromStoreUpdate = React.useRef();\n      var renderIsScheduled = React.useRef(false);\n      var isProcessingDispatch = React.useRef(false);\n      var isMounted = React.useRef(false);\n      var latestSubscriptionCallbackError = React.useRef();\n      useIsomorphicLayoutEffect(function () {\n        isMounted.current = true;\n        return function () {\n          isMounted.current = false;\n        };\n      }, []);\n      var actualChildPropsSelector = React.useMemo(function () {\n        var selector = function selector() {\n          // Tricky logic here:\n          // - This render may have been triggered by a Redux store update that produced new child props\n          // - However, we may have gotten new wrapper props after that\n          // If we have new child props, and the same wrapper props, we know we should use the new child props as-is.\n          // But, if we have new wrapper props, those might change the child props, so we have to recalculate things.\n          // So, we'll use the child props from store update only if the wrapper props are the same as last time.\n          if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {\n            return childPropsFromStoreUpdate.current;\n          } // TODO We're reading the store directly in render() here. Bad idea?\n          // This will likely cause Bad Things (TM) to happen in Concurrent Mode.\n          // Note that we do this because on renders _not_ caused by store updates, we need the latest store state\n          // to determine what the child props should be.\n\n\n          return childPropsSelector(store.getState(), wrapperProps);\n        };\n\n        return selector;\n      }, [store, wrapperProps]); // We need this to execute synchronously every time we re-render. However, React warns\n      // about useLayoutEffect in SSR, so we try to detect environment and fall back to\n      // just useEffect instead to avoid the warning, since neither will run anyway.\n\n      var subscribeForReact = React.useMemo(function () {\n        var subscribe = function subscribe(reactListener) {\n          if (!subscription) {\n            return function () {};\n          }\n\n          return subscribeUpdates(shouldHandleStateChanges, store, subscription, // @ts-ignore\n          childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, isMounted, childPropsFromStoreUpdate, notifyNestedSubs, reactListener);\n        };\n\n        return subscribe;\n      }, [subscription]);\n      useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, childPropsFromStoreUpdate, notifyNestedSubs]);\n      var actualChildProps;\n\n      try {\n        actualChildProps = useSyncExternalStore( // TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing\n        subscribeForReact, // TODO This is incredibly hacky. We've already processed the store update and calculated new child props,\n        // TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.\n        actualChildPropsSelector, getServerState ? function () {\n          return childPropsSelector(getServerState(), wrapperProps);\n        } : actualChildPropsSelector);\n      } catch (err) {\n        if (latestSubscriptionCallbackError.current) {\n          ;\n          err.message += \"\\nThe error may be correlated with this previous error:\\n\".concat(latestSubscriptionCallbackError.current.stack, \"\\n\\n\");\n        }\n\n        throw err;\n      }\n\n      useIsomorphicLayoutEffect(function () {\n        latestSubscriptionCallbackError.current = undefined;\n        childPropsFromStoreUpdate.current = undefined;\n        lastChildProps.current = actualChildProps;\n      }); // Now that all that's done, we can finally try to actually render the child component.\n      // We memoize the elements for the rendered child component as an optimization.\n\n      var renderedWrappedComponent = React.useMemo(function () {\n        return (\n          /*#__PURE__*/\n          // @ts-ignore\n          React.createElement(WrappedComponent, _extends({}, actualChildProps, {\n            ref: reactReduxForwardedRef\n          }))\n        );\n      }, [reactReduxForwardedRef, WrappedComponent, actualChildProps]); // If React sees the exact same element reference as last time, it bails out of re-rendering\n      // that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.\n\n      var renderedChild = React.useMemo(function () {\n        if (shouldHandleStateChanges) {\n          // If this component is subscribed to store updates, we need to pass its own\n          // subscription instance down to our descendants. That means rendering the same\n          // Context instance, and putting a different value into the context.\n          return /*#__PURE__*/React.createElement(ContextToUse.Provider, {\n            value: overriddenContextValue\n          }, renderedWrappedComponent);\n        }\n\n        return renderedWrappedComponent;\n      }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);\n      return renderedChild;\n    }\n\n    var _Connect = React.memo(ConnectFunction); // Add a hacky cast to get the right output type\n\n\n    var Connect = _Connect;\n    Connect.WrappedComponent = WrappedComponent;\n    Connect.displayName = ConnectFunction.displayName = displayName;\n\n    if (forwardRef) {\n      var _forwarded = React.forwardRef(function forwardConnectRef(props, ref) {\n        // @ts-ignore\n        return /*#__PURE__*/React.createElement(Connect, _extends({}, props, {\n          reactReduxForwardedRef: ref\n        }));\n      });\n\n      var forwarded = _forwarded;\n      forwarded.displayName = displayName;\n      forwarded.WrappedComponent = WrappedComponent;\n      return hoistStatics(forwarded, WrappedComponent);\n    }\n\n    return hoistStatics(Connect, WrappedComponent);\n  };\n\n  return wrapWithConnect;\n}\n\nexport default connect;","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","hoistStatics","React","isValidElementType","isContextConsumer","defaultSelectorFactory","mapDispatchToPropsFactory","mapStateToPropsFactory","mergePropsFactory","createSubscription","useIsomorphicLayoutEffect","shallowEqual","warning","ReactReduxContext","notInitialized","useSyncExternalStore","initializeConnect","fn","EMPTY_ARRAY","NO_SUBSCRIPTION_ARRAY","stringifyComponent","Comp","JSON","stringify","err","String","useIsomorphicLayoutEffectWithArgs","effectFunc","effectArgs","dependencies","captureWrapperProps","lastWrapperProps","lastChildProps","renderIsScheduled","wrapperProps","childPropsFromStoreUpdate","notifyNestedSubs","current","subscribeUpdates","shouldHandleStateChanges","store","subscription","childPropsSelector","isMounted","additionalSubscribeListener","didUnsubscribe","lastThrownError","checkForUpdates","latestStoreState","getState","newChildProps","error","e","onStateChange","trySubscribe","unsubscribeWrapper","tryUnsubscribe","initStateUpdates","strictEqual","a","b","hasWarnedAboutDeprecatedPureOption","connect","mapStateToProps","mapDispatchToProps","mergeProps","pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual","forwardRef","context","process","env","NODE_ENV","undefined","Context","initMapStateToProps","initMapDispatchToProps","initMergeProps","Boolean","wrapWithConnect","WrappedComponent","Error","wrappedComponentName","displayName","name","selectorFactoryOptions","ConnectFunction","props","useMemo","reactReduxForwardedRef","propsContext","ContextToUse","Consumer","createElement","contextValue","useContext","didStoreComeFromProps","dispatch","didStoreComeFromContext","getServerState","bind","overriddenContextValue","useRef","isProcessingDispatch","latestSubscriptionCallbackError","actualChildPropsSelector","selector","subscribeForReact","subscribe","reactListener","actualChildProps","message","stack","renderedWrappedComponent","ref","renderedChild","Provider","value","_Connect","memo","Connect","_forwarded","forwardConnectRef","forwarded"],"sources":["D:/mahaluxmi_hardwere_softwere/Mahaluxmi_client/node_modules/react-redux/es/components/connect.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"reactReduxForwardedRef\"];\n\n/* eslint-disable valid-jsdoc, @typescript-eslint/no-unused-vars */\nimport hoistStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\nimport { isValidElementType, isContextConsumer } from 'react-is';\nimport defaultSelectorFactory from '../connect/selectorFactory';\nimport { mapDispatchToPropsFactory } from '../connect/mapDispatchToProps';\nimport { mapStateToPropsFactory } from '../connect/mapStateToProps';\nimport { mergePropsFactory } from '../connect/mergeProps';\nimport { createSubscription } from '../utils/Subscription';\nimport { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect';\nimport shallowEqual from '../utils/shallowEqual';\nimport warning from '../utils/warning';\nimport { ReactReduxContext } from './Context';\nimport { notInitialized } from '../utils/useSyncExternalStore';\nlet useSyncExternalStore = notInitialized;\nexport const initializeConnect = fn => {\n  useSyncExternalStore = fn;\n}; // Define some constant arrays just to avoid re-creating these\n\nconst EMPTY_ARRAY = [null, 0];\nconst NO_SUBSCRIPTION_ARRAY = [null, null]; // Attempts to stringify whatever not-really-a-component value we were given\n// for logging in an error message\n\nconst stringifyComponent = Comp => {\n  try {\n    return JSON.stringify(Comp);\n  } catch (err) {\n    return String(Comp);\n  }\n};\n\n// This is \"just\" a `useLayoutEffect`, but with two modifications:\n// - we need to fall back to `useEffect` in SSR to avoid annoying warnings\n// - we extract this to a separate function to avoid closing over values\n//   and causing memory leaks\nfunction useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {\n  useIsomorphicLayoutEffect(() => effectFunc(...effectArgs), dependencies);\n} // Effect callback, extracted: assign the latest props values to refs for later usage\n\n\nfunction captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, // actualChildProps: unknown,\nchildPropsFromStoreUpdate, notifyNestedSubs) {\n  // We want to capture the wrapper props and child props we used for later comparisons\n  lastWrapperProps.current = wrapperProps;\n  renderIsScheduled.current = false; // If the render was from a store update, clear out that reference and cascade the subscriber update\n\n  if (childPropsFromStoreUpdate.current) {\n    childPropsFromStoreUpdate.current = null;\n    notifyNestedSubs();\n  }\n} // Effect callback, extracted: subscribe to the Redux store or nearest connected ancestor,\n// check for updates after dispatched actions, and trigger re-renders.\n\n\nfunction subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, isMounted, childPropsFromStoreUpdate, notifyNestedSubs, // forceComponentUpdateDispatch: React.Dispatch<any>,\nadditionalSubscribeListener) {\n  // If we're not subscribed to the store, nothing to do here\n  if (!shouldHandleStateChanges) return () => {}; // Capture values for checking if and when this component unmounts\n\n  let didUnsubscribe = false;\n  let lastThrownError = null; // We'll run this callback every time a store subscription update propagates to this component\n\n  const checkForUpdates = () => {\n    if (didUnsubscribe || !isMounted.current) {\n      // Don't run stale listeners.\n      // Redux doesn't guarantee unsubscriptions happen until next dispatch.\n      return;\n    } // TODO We're currently calling getState ourselves here, rather than letting `uSES` do it\n\n\n    const latestStoreState = store.getState();\n    let newChildProps, error;\n\n    try {\n      // Actually run the selector with the most recent store state and wrapper props\n      // to determine what the child props should be\n      newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);\n    } catch (e) {\n      error = e;\n      lastThrownError = e;\n    }\n\n    if (!error) {\n      lastThrownError = null;\n    } // If the child props haven't changed, nothing to do here - cascade the subscription update\n\n\n    if (newChildProps === lastChildProps.current) {\n      if (!renderIsScheduled.current) {\n        notifyNestedSubs();\n      }\n    } else {\n      // Save references to the new child props.  Note that we track the \"child props from store update\"\n      // as a ref instead of a useState/useReducer because we need a way to determine if that value has\n      // been processed.  If this went into useState/useReducer, we couldn't clear out the value without\n      // forcing another re-render, which we don't want.\n      lastChildProps.current = newChildProps;\n      childPropsFromStoreUpdate.current = newChildProps;\n      renderIsScheduled.current = true; // TODO This is hacky and not how `uSES` is meant to be used\n      // Trigger the React `useSyncExternalStore` subscriber\n\n      additionalSubscribeListener();\n    }\n  }; // Actually subscribe to the nearest connected ancestor (or store)\n\n\n  subscription.onStateChange = checkForUpdates;\n  subscription.trySubscribe(); // Pull data from the store after first render in case the store has\n  // changed since we began.\n\n  checkForUpdates();\n\n  const unsubscribeWrapper = () => {\n    didUnsubscribe = true;\n    subscription.tryUnsubscribe();\n    subscription.onStateChange = null;\n\n    if (lastThrownError) {\n      // It's possible that we caught an error due to a bad mapState function, but the\n      // parent re-rendered without this component and we're about to unmount.\n      // This shouldn't happen as long as we do top-down subscriptions correctly, but\n      // if we ever do those wrong, this throw will surface the error in our tests.\n      // In that case, throw the error from here so it doesn't get lost.\n      throw lastThrownError;\n    }\n  };\n\n  return unsubscribeWrapper;\n} // Reducer initial state creation for our update reducer\n\n\nconst initStateUpdates = () => EMPTY_ARRAY;\n\nfunction strictEqual(a, b) {\n  return a === b;\n}\n/**\r\n * Infers the type of props that a connector will inject into a component.\r\n */\n\n\nlet hasWarnedAboutDeprecatedPureOption = false;\n/**\r\n * Connects a React component to a Redux store.\r\n *\r\n * - Without arguments, just wraps the component, without changing the behavior / props\r\n *\r\n * - If 2 params are passed (3rd param, mergeProps, is skipped), default behavior\r\n * is to override ownProps (as stated in the docs), so what remains is everything that's\r\n * not a state or dispatch prop\r\n *\r\n * - When 3rd param is passed, we don't know if ownProps propagate and whether they\r\n * should be valid component props, because it depends on mergeProps implementation.\r\n * As such, it is the user's responsibility to extend ownProps interface from state or\r\n * dispatch props or both when applicable\r\n *\r\n * @param mapStateToProps A function that extracts values from state\r\n * @param mapDispatchToProps Setup for dispatching actions\r\n * @param mergeProps Optional callback to merge state and dispatch props together\r\n * @param options Options for configuring the connection\r\n *\r\n */\n\nfunction connect(mapStateToProps, mapDispatchToProps, mergeProps, {\n  // The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.\n  // @ts-ignore\n  pure,\n  areStatesEqual = strictEqual,\n  areOwnPropsEqual = shallowEqual,\n  areStatePropsEqual = shallowEqual,\n  areMergedPropsEqual = shallowEqual,\n  // use React's forwardRef to expose a ref of the wrapped component\n  forwardRef = false,\n  // the context consumer to use\n  context = ReactReduxContext\n} = {}) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (pure !== undefined && !hasWarnedAboutDeprecatedPureOption) {\n      hasWarnedAboutDeprecatedPureOption = true;\n      warning('The `pure` option has been removed. `connect` is now always a \"pure/memoized\" component');\n    }\n  }\n\n  const Context = context;\n  const initMapStateToProps = mapStateToPropsFactory(mapStateToProps);\n  const initMapDispatchToProps = mapDispatchToPropsFactory(mapDispatchToProps);\n  const initMergeProps = mergePropsFactory(mergeProps);\n  const shouldHandleStateChanges = Boolean(mapStateToProps);\n\n  const wrapWithConnect = WrappedComponent => {\n    if (process.env.NODE_ENV !== 'production' && !isValidElementType(WrappedComponent)) {\n      throw new Error(`You must pass a component to the function returned by connect. Instead received ${stringifyComponent(WrappedComponent)}`);\n    }\n\n    const wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';\n    const displayName = `Connect(${wrappedComponentName})`;\n    const selectorFactoryOptions = {\n      shouldHandleStateChanges,\n      displayName,\n      wrappedComponentName,\n      WrappedComponent,\n      // @ts-ignore\n      initMapStateToProps,\n      // @ts-ignore\n      initMapDispatchToProps,\n      initMergeProps,\n      areStatesEqual,\n      areStatePropsEqual,\n      areOwnPropsEqual,\n      areMergedPropsEqual\n    };\n\n    function ConnectFunction(props) {\n      const [propsContext, reactReduxForwardedRef, wrapperProps] = React.useMemo(() => {\n        // Distinguish between actual \"data\" props that were passed to the wrapper component,\n        // and values needed to control behavior (forwarded refs, alternate context instances).\n        // To maintain the wrapperProps object reference, memoize this destructuring.\n        const {\n          reactReduxForwardedRef\n        } = props,\n              wrapperProps = _objectWithoutPropertiesLoose(props, _excluded);\n\n        return [props.context, reactReduxForwardedRef, wrapperProps];\n      }, [props]);\n      const ContextToUse = React.useMemo(() => {\n        // Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.\n        // Memoize the check that determines which context instance we should use.\n        return propsContext && propsContext.Consumer && // @ts-ignore\n        isContextConsumer( /*#__PURE__*/React.createElement(propsContext.Consumer, null)) ? propsContext : Context;\n      }, [propsContext, Context]); // Retrieve the store and ancestor subscription via context, if available\n\n      const contextValue = React.useContext(ContextToUse); // The store _must_ exist as either a prop or in context.\n      // We'll check to see if it _looks_ like a Redux store first.\n      // This allows us to pass through a `store` prop that is just a plain value.\n\n      const didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);\n      const didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);\n\n      if (process.env.NODE_ENV !== 'production' && !didStoreComeFromProps && !didStoreComeFromContext) {\n        throw new Error(`Could not find \"store\" in the context of ` + `\"${displayName}\". Either wrap the root component in a <Provider>, ` + `or pass a custom React context provider to <Provider> and the corresponding ` + `React context consumer to ${displayName} in connect options.`);\n      } // Based on the previous check, one of these must be true\n\n\n      const store = didStoreComeFromProps ? props.store : contextValue.store;\n      const getServerState = didStoreComeFromContext ? contextValue.getServerState : store.getState;\n      const childPropsSelector = React.useMemo(() => {\n        // The child props selector needs the store reference as an input.\n        // Re-create this selector whenever the store changes.\n        return defaultSelectorFactory(store.dispatch, selectorFactoryOptions);\n      }, [store]);\n      const [subscription, notifyNestedSubs] = React.useMemo(() => {\n        if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY; // This Subscription's source should match where store came from: props vs. context. A component\n        // connected to the store via props shouldn't use subscription from context, or vice versa.\n\n        const subscription = createSubscription(store, didStoreComeFromProps ? undefined : contextValue.subscription); // `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in\n        // the middle of the notification loop, where `subscription` will then be null. This can\n        // probably be avoided if Subscription's listeners logic is changed to not call listeners\n        // that have been unsubscribed in the  middle of the notification loop.\n\n        const notifyNestedSubs = subscription.notifyNestedSubs.bind(subscription);\n        return [subscription, notifyNestedSubs];\n      }, [store, didStoreComeFromProps, contextValue]); // Determine what {store, subscription} value should be put into nested context, if necessary,\n      // and memoize that value to avoid unnecessary context updates.\n\n      const overriddenContextValue = React.useMemo(() => {\n        if (didStoreComeFromProps) {\n          // This component is directly subscribed to a store from props.\n          // We don't want descendants reading from this store - pass down whatever\n          // the existing context value is from the nearest connected ancestor.\n          return contextValue;\n        } // Otherwise, put this component's subscription instance into context, so that\n        // connected descendants won't update until after this component is done\n\n\n        return _extends({}, contextValue, {\n          subscription\n        });\n      }, [didStoreComeFromProps, contextValue, subscription]); // Set up refs to coordinate values between the subscription effect and the render logic\n\n      const lastChildProps = React.useRef();\n      const lastWrapperProps = React.useRef(wrapperProps);\n      const childPropsFromStoreUpdate = React.useRef();\n      const renderIsScheduled = React.useRef(false);\n      const isProcessingDispatch = React.useRef(false);\n      const isMounted = React.useRef(false);\n      const latestSubscriptionCallbackError = React.useRef();\n      useIsomorphicLayoutEffect(() => {\n        isMounted.current = true;\n        return () => {\n          isMounted.current = false;\n        };\n      }, []);\n      const actualChildPropsSelector = React.useMemo(() => {\n        const selector = () => {\n          // Tricky logic here:\n          // - This render may have been triggered by a Redux store update that produced new child props\n          // - However, we may have gotten new wrapper props after that\n          // If we have new child props, and the same wrapper props, we know we should use the new child props as-is.\n          // But, if we have new wrapper props, those might change the child props, so we have to recalculate things.\n          // So, we'll use the child props from store update only if the wrapper props are the same as last time.\n          if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {\n            return childPropsFromStoreUpdate.current;\n          } // TODO We're reading the store directly in render() here. Bad idea?\n          // This will likely cause Bad Things (TM) to happen in Concurrent Mode.\n          // Note that we do this because on renders _not_ caused by store updates, we need the latest store state\n          // to determine what the child props should be.\n\n\n          return childPropsSelector(store.getState(), wrapperProps);\n        };\n\n        return selector;\n      }, [store, wrapperProps]); // We need this to execute synchronously every time we re-render. However, React warns\n      // about useLayoutEffect in SSR, so we try to detect environment and fall back to\n      // just useEffect instead to avoid the warning, since neither will run anyway.\n\n      const subscribeForReact = React.useMemo(() => {\n        const subscribe = reactListener => {\n          if (!subscription) {\n            return () => {};\n          }\n\n          return subscribeUpdates(shouldHandleStateChanges, store, subscription, // @ts-ignore\n          childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, isMounted, childPropsFromStoreUpdate, notifyNestedSubs, reactListener);\n        };\n\n        return subscribe;\n      }, [subscription]);\n      useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, childPropsFromStoreUpdate, notifyNestedSubs]);\n      let actualChildProps;\n\n      try {\n        actualChildProps = useSyncExternalStore( // TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing\n        subscribeForReact, // TODO This is incredibly hacky. We've already processed the store update and calculated new child props,\n        // TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.\n        actualChildPropsSelector, getServerState ? () => childPropsSelector(getServerState(), wrapperProps) : actualChildPropsSelector);\n      } catch (err) {\n        if (latestSubscriptionCallbackError.current) {\n          ;\n          err.message += `\\nThe error may be correlated with this previous error:\\n${latestSubscriptionCallbackError.current.stack}\\n\\n`;\n        }\n\n        throw err;\n      }\n\n      useIsomorphicLayoutEffect(() => {\n        latestSubscriptionCallbackError.current = undefined;\n        childPropsFromStoreUpdate.current = undefined;\n        lastChildProps.current = actualChildProps;\n      }); // Now that all that's done, we can finally try to actually render the child component.\n      // We memoize the elements for the rendered child component as an optimization.\n\n      const renderedWrappedComponent = React.useMemo(() => {\n        return (\n          /*#__PURE__*/\n          // @ts-ignore\n          React.createElement(WrappedComponent, _extends({}, actualChildProps, {\n            ref: reactReduxForwardedRef\n          }))\n        );\n      }, [reactReduxForwardedRef, WrappedComponent, actualChildProps]); // If React sees the exact same element reference as last time, it bails out of re-rendering\n      // that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.\n\n      const renderedChild = React.useMemo(() => {\n        if (shouldHandleStateChanges) {\n          // If this component is subscribed to store updates, we need to pass its own\n          // subscription instance down to our descendants. That means rendering the same\n          // Context instance, and putting a different value into the context.\n          return /*#__PURE__*/React.createElement(ContextToUse.Provider, {\n            value: overriddenContextValue\n          }, renderedWrappedComponent);\n        }\n\n        return renderedWrappedComponent;\n      }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);\n      return renderedChild;\n    }\n\n    const _Connect = React.memo(ConnectFunction);\n\n    // Add a hacky cast to get the right output type\n    const Connect = _Connect;\n    Connect.WrappedComponent = WrappedComponent;\n    Connect.displayName = ConnectFunction.displayName = displayName;\n\n    if (forwardRef) {\n      const _forwarded = React.forwardRef(function forwardConnectRef(props, ref) {\n        // @ts-ignore\n        return /*#__PURE__*/React.createElement(Connect, _extends({}, props, {\n          reactReduxForwardedRef: ref\n        }));\n      });\n\n      const forwarded = _forwarded;\n      forwarded.displayName = displayName;\n      forwarded.WrappedComponent = WrappedComponent;\n      return hoistStatics(forwarded, WrappedComponent);\n    }\n\n    return hoistStatics(Connect, WrappedComponent);\n  };\n\n  return wrapWithConnect;\n}\n\nexport default connect;"],"mappings":"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"},"metadata":{},"sourceType":"module"}